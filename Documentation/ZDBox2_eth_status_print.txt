=============================================================================
List of generated methods in project: ZDBox2_eth_status_print

This text description is generated by Processor Expert. Do not modify it.
=============================================================================

Module "intMan1"   (component interrupt_manager)
   - intMan1_INT_SYS_InstallHandler -Installs an interrupt handler routine for a given IRQ number.
   - intMan1_INT_SYS_EnableIRQ -Enables an interrupt for a given IRQ number.
   - intMan1_INT_SYS_DisableIRQ -Disables an interrupt for a given IRQ number.
   - intMan1_INT_SYS_EnableIRQGlobal -Enables system interrupt.
   - intMan1_INT_SYS_DisableIRQGlobal -Disable system interrupt.
   - intMan1_INT_SYS_SetPriority -Set Interrupt Priority.
   - intMan1_INT_SYS_GetPriority -Get Interrupt Priority.
   - intMan1_INT_SYS_SetSoftwareIRQRequest -Set software interrupt request.
   - intMan1_INT_SYS_ClearSoftwareIRQRequest -Clear software interrupt request.
   - intMan1_INT_SYS_EnableIRQ_MC -Enables an interrupt for a given IRQ number, on the given cores.
   - intMan1_INT_SYS_GetCoresForIRQ -Gets the cores on which an interrupt for the specified IRQ number is enabled.
   - intMan1_INT_SYS_DisableIRQ_MC -Disables an interrupt for a given IRQ number, on the given cores.
   - intMan1_INT_SYS_DisableIRQ_MC_All -Disables an interrupt for a given IRQ number, on all cores.

Module "ethernet1" (component enet)
   - ethernet1_ENET_DRV_GetDefaultConfig -Gets the default configuration structure.
   - ethernet1_ENET_DRV_Init -Initializes the ENET module.
   - ethernet1_ENET_DRV_Deinit -Deinitializes the ENET module.
   - ethernet1_ENET_DRV_ReadFrame -Reads a received Ethernet frame.
   - ethernet1_ENET_DRV_ProvideRxBuff -Provides a receive buffer to be used by the driver for reception.
   - ethernet1_ENET_DRV_SendFrame -Sends an Ethernet frame.
   - ethernet1_ENET_DRV_GetTransmitStatus -Checks if the transmission of a buffer is complete and extracts information related 
                to the transmission.
   - ethernet1_ENET_DRV_EnableMDIO -Enables the MDIO interface.
   - ethernet1_ENET_DRV_MDIORead -Reads the selected register of the PHY.
   - ethernet1_ENET_DRV_MDIOWrite -Writes the selected register of the PHY.
   - ethernet1_ENET_DRV_MDIOReadMMD -Reads a register of the specified MMD in a PHY device.
   - ethernet1_ENET_DRV_MDIOWriteMMD -Writes a register of the specified MMD in a PHY device.
   - ethernet1_ENET_DRV_SetMacAddr -Configures the physical address of the MAC.
   - ethernet1_ENET_DRV_GetMacAddr -Gets the physical address of the MAC.
   - ethernet1_ENET_DRV_SetUnicastForward -Enables/Disables forwarding of unicast traffic having a specific MAC address as 
                destination.
   - ethernet1_ENET_DRV_SetMulticastForward -Enables/Disables forwarding of multicast traffic having a specific MAC address as 
                destination.
   - ethernet1_ENET_DRV_SetMulticastForwardAll -Enables/Disables forwarding of the multicast traffic, irrespective of the 
                destination MAC address.
   - ethernet1_ENET_DRV_SetSleepMode -Sets the MAC in sleep mode or normal mode.
   - ethernet1_ENET_DRV_ConfigCounters -Enables/Disables the MIB counters.
   - ethernet1_ENET_DRV_GetCounter -Gets statistics from the specified counter.
   - ethernet1_ENET_DRV_GetInterruptFlags -Gets a mask of the interrupt events which occurred.
   - ethernet1_ENET_DRV_SetSpeed -Sets the speed of the MII interface.
   - ethernet1_ENET_DRV_TimerInit -Initializes the adjustable timer using the given configuration and enables it.
   - ethernet1_ENET_DRV_TimerStart -Starts the timer.
   - ethernet1_ENET_DRV_TimerStop -Stops the timer.
   - ethernet1_ENET_DRV_TimerSet -Sets the value of the timer.
   - ethernet1_ENET_DRV_TimerGet -Gets the value of the timer.
   - ethernet1_ENET_DRV_TimerSetCorrection -Sets the timer correction period and correction increment value.
   - ethernet1_ENET_DRV_TimerEnableChannel -Configures and enables a specific timer channel.
   - ethernet1_ENET_DRV_TimerSetCompare -Sets the compare value for a channel configured as output compare.
   - ethernet1_ENET_DRV_TimerGetCapture -Gets the last value captured on a specific channel configured as input capture.
   - ethernet1_ENET_DRV_TimerSetPulseWidth -Sets the pulse width for a channel configured as output compare with output in 
                pulse mode.
   - ethernet1_ENET_DRV_ConfigTxScheme -Sets the transmitter queue selection/arbitration scheme.
   - ethernet1_ENET_DRV_ConfigIdleSlope -Configures the idle slope for the additional classes traffic.
   - ethernet1_ENET_DRV_ConfigClassMatch -Configures the VLAN priority matching for the specified class.
   - ethernet1_ENET_DRV_ConfigRxFlush -Enables/Disables receive flushing for a specified ring.
   - ethernet1_ENET_DRV_EnableRxInterruptCoalescing -Enables receive interrupts coalescing.
   - ethernet1_ENET_DRV_DisableRxInterruptCoalescing -Disables receive interrupts coalescing.
   - ethernet1_ENET_DRV_EnableTxInterruptCoalescing -Enables transmit interrupts coalescing.
   - ethernet1_ENET_DRV_DisableTxInterruptCoalescing -Disables transmit interrupts coalescing.
   - ethernet1_ENET_DRV_SetFIFOThreshold -Sets FIFO threshold levels.
   - ethernet1_ENET_DRV_SetTxFIFOWatermark -Sets the transmit FIFO watermark.
   - ethernet1_ENET_DRV_EnableTxStoreAndForward -Enables the store and forward feature on the transmit path.
   - ethernet1_ENET_DRV_RxParserInit -Configures and enables the receive parser.
   - ethernet1_ENET_DRV_RxParserDeinit -Erases all the rules and disables the receive parser.
   - ethernet1_ENET_DRV_RxParserAddAcceptRule -Appends an acceptance rule to the receive parser.
   - ethernet1_ENET_DRV_RxParserAddRejectRule -Appends a rejection rule to the receive parser.
   - ethernet1_ENET_DRV_RxParserAddLinkingRule -Appends a linking rule to the receive parser.
   - ethernet1_ENET_DRV_RxParserGetState -Returns the status of the receive parser.
   - ethernet1_ENET_DRV_RxParserGetCount -Returns the value of the requested receive parser counter.

Module "osif1"     (component osif)
   - osif1_OSIF_TimeDelay -Delays execution for a number of milliseconds.
   - osif1_OSIF_MutexLock -Waits for a mutex and locks it.
   - osif1_OSIF_MutexUnlock -Unlocks a previously locked mutex.
   - osif1_OSIF_MutexCreate -Create an unlocked mutex.
   - osif1_OSIF_MutexDestroy -Destroys a previously created mutex.
   - osif1_OSIF_SemaWait -Decrement a semaphore with timeout.
   - osif1_OSIF_SemaPost -Increment a semaphore.
   - osif1_OSIF_SemaCreate -Creates a semaphore with a given value.
   - osif1_OSIF_SemaDestroy -Destroys a previously created semaphore.
   - osif1_OSIF_GetMilliseconds -Returns the number of miliseconds elapsed since starting the internal timer or starting the 
                scheduler.

Module "clockMan1" (component clock_manager)
   - clockMan1_CLOCK_DRV_Init -Initialize clocking modules
   - clockMan1_CLOCK_DRV_GetFreq -Return frequency.

Module "pin_mux"   (component PinSettings)
   - pin_mux_PINS_DRV_Init -This function configures the pins with the options provided in the provided structure
   - pin_mux_PINS_DRV_SetPullSel -This function configures the internal resistor
   - pin_mux_PINS_DRV_SetOutputBuffer -This function configures the output buffer
   - pin_mux_PINS_DRV_SetInputBuffer -This function configures the input buffer
   - pin_mux_PINS_DRV_ConfigIntFilterClock -This function configures the interrupt filter clock prescaler
   - pin_mux_PINS_DRV_SetExInt -This function configures the external interrupt
   - pin_mux_PINS_DRV_ClearPinExIntFlag -This function clears the individual pin external interrupt status flag
   - pin_mux_PINS_DRV_GetPinExIntFlag -This function gets the individual pin external interrupt status flag
   - pin_mux_PINS_DRV_ClearExIntFlag -This function clears the entire external interrupt status flag
   - pin_mux_PINS_DRV_GetExIntFlag -This function gets the individual pin external interrupt status flag
   - pin_mux_PINS_DRV_WritePin -This function writes the given pin from a port, with the given value ('0' represents LOW, '1' 
                represents HIGH)
   - pin_mux_PINS_DRV_WritePins -This function writes all pins configured as output with the values given in the parameter pins.
                '0' represents LOW, '1' represents HIGH
   - pin_mux_PINS_DRV_GetPinsOutput -This function returns the current output that is written to a port. Only pins that are 
                configured as output will have meaningful values
   - pin_mux_PINS_DRV_SetPins -This function configures output pins listed in parameter pins (bits that are '1') to have a 
                value of 'set' (HIGH). Pins corresponding to '0' will be unaffected
   - pin_mux_PINS_DRV_ClearPins -This function configures output pins listed in parameter pins (bits that are '1') to have a 
                'cleared' value (LOW). Pins corresponding to '0' will be unaffected
   - pin_mux_PINS_DRV_TogglePins -This function toggles output pins listed in parameter pins (bits that are '1'). Pins 
                corresponding to '0' will be unaffected
   - pin_mux_PINS_DRV_ReadPins -This function returns the current input values from a port. Only pins configured as input will 
                have meaningful values

Module "uart_pal1" (component uart_pal)
   - uart_pal1_UART_GetDefaultConfig -Gets the default configuration structure.
   - uart_pal1_UART_Init -Initializes the uart module.
   - uart_pal1_UART_Deinit -De-initializes the uart module.
   - uart_pal1_UART_SetBaudRate -Configures the UART baud rate.
   - uart_pal1_UART_GetBaudRate -Returns the UART baud rate.
   - uart_pal1_UART_SendDataBlocking -Perform a blocking UART transmission.
   - uart_pal1_UART_SendData -Perform a non-blocking UART transmission.
   - uart_pal1_UART_AbortSendingData -Terminates a non-blocking transmission early.
   - uart_pal1_UART_GetTransmitStatus -Get the status of the current non-blocking UART transmission.
   - uart_pal1_UART_ReceiveDataBlocking -Perform a blocking UART reception.
   - uart_pal1_UART_ReceiveData -Perform a non-blocking UART reception.
   - uart_pal1_UART_AbortReceivingData -Terminates a non-blocking reception early.
   - uart_pal1_UART_GetReceiveStatus -Get the status of the current non-blocking UART reception.
   - uart_pal1_UART_SetRxBuffer -Provide a buffer for receiving data.
   - uart_pal1_UART_SetTxBuffer -Provide a buffer for transmitting data.

Module "dmaController1" (component edma)
   - dmaController1_EDMA_DRV_Init -Initializes the eDMA module.
   - dmaController1_EDMA_DRV_Deinit -Shuts down the eDMA module.
   - dmaController1_EDMA_DRV_ChannelInit -Initializes a eDMA virtualChannel.
   - dmaController1_EDMA_DRV_ReleaseChannel -Releases an eDMA virtualChannel.
   - dmaController1_EDMA_DRV_StartChannel -Starts an eDMA virtualChannel.
   - dmaController1_EDMA_DRV_StopChannel -Stops the eDMA virtualChannel.
   - dmaController1_EDMA_DRV_InstallCallback -Registers the callback function and the parameter for eDMA virtualChannel.
   - dmaController1_EDMA_DRV_GetChannelStatus -Gets the eDMA virtualChannel status.
   - dmaController1_EDMA_DRV_PushConfigToReg -Copies the virtualChannel configuration to the TCD registers.
   - dmaController1_EDMA_DRV_PushConfigToSTCD -Copies the virtualChannel configuration to the software TCD structure.
   - dmaController1_EDMA_DRV_ConfigSingleBlockTransfer -Configures a simple single block data transfer with DMA. This function 
                configures the descriptor for a single block transfer.
   - dmaController1_EDMA_DRV_ConfigLoopTransfer -Configures the DMA transfer in loop mode.
   - dmaController1_EDMA_DRV_ConfigScatterGatherTransfer -Configures the DMA transfer in a scatter-gather mode.
   - dmaController1_EDMA_DRV_ConfigMultiBlockTransfer -Configures a multiple block data transfer with DMA. This function 
                configures the descriptor for a multi block transfer.
   - dmaController1_EDMA_DRV_CancelTransfer -Cancels the remaining data transfer.
   - dmaController1_EDMA_DRV_SetChannelRequestAndTrigger -Configures the DMA request and periodic trigger for the eDMA channel.
   - dmaController1_EDMA_DRV_ClearTCD -Clears all registers to 0 for the virtualChannel's TCD.
   - dmaController1_EDMA_DRV_SetSrcAddr -Configures the source address for the eDMA virtualChannel.
   - dmaController1_EDMA_DRV_SetSrcOffset -Configures the source address signed offset for the eDMA virtualChannel.
   - dmaController1_EDMA_DRV_SetSrcReadChunkSize -Configures the source data chunk size (transferred in a read sequence).
   - dmaController1_EDMA_DRV_SetDestAddr -Configures the destination address for the eDMA virtualChannel.
   - dmaController1_EDMA_DRV_SetDestOffset -Configures the destination address signed offset for the eDMA virtualChannel.
   - dmaController1_EDMA_DRV_SetDestWriteChunkSize -Configures the destination data chunk size (transferred in a write sequence)
                .
   - dmaController1_EDMA_DRV_SetMinorLoopBlockSize -Configures the number of bytes to be transferred in each service request of 
                the virtualChannel.
   - dmaController1_EDMA_DRV_SetMajorLoopIterationCount -Configures the number of major loop iterations.
   - dmaController1_EDMA_DRV_GetRemainingMajorIterationsCount -Returns the remaining major loop iteration count.
   - dmaController1_EDMA_DRV_SetScatterGatherLink -Configures the memory address of the next TCD, in scatter/gather mode.
   - dmaController1_EDMA_DRV_DisableRequestsOnTransferComplete -Disables/Enables the DMA request after the major loop completes 
                for the TCD.
   - dmaController1_EDMA_DRV_SetSrcLastAddrAdjustment -Configures the source address last adjustment.
   - dmaController1_EDMA_DRV_SetDestLastAddrAdjustment -Configures the destination address last adjustment.
   - dmaController1_EDMA_DRV_ConfigureInterrupt -Disables/Enables the virtualChannel interrupt requests.
   - dmaController1_EDMA_DRV_TriggerSwRequest -Triggers a sw request for the current virtualChannel.

Module "uart_pal2" (component uart_pal)
   - uart_pal2_UART_GetDefaultConfig -Gets the default configuration structure.
   - uart_pal2_UART_Init -Initializes the uart module.
   - uart_pal2_UART_Deinit -De-initializes the uart module.
   - uart_pal2_UART_SetBaudRate -Configures the UART baud rate.
   - uart_pal2_UART_GetBaudRate -Returns the UART baud rate.
   - uart_pal2_UART_SendDataBlocking -Perform a blocking UART transmission.
   - uart_pal2_UART_SendData -Perform a non-blocking UART transmission.
   - uart_pal2_UART_AbortSendingData -Terminates a non-blocking transmission early.
   - uart_pal2_UART_GetTransmitStatus -Get the status of the current non-blocking UART transmission.
   - uart_pal2_UART_ReceiveDataBlocking -Perform a blocking UART reception.
   - uart_pal2_UART_ReceiveData -Perform a non-blocking UART reception.
   - uart_pal2_UART_AbortReceivingData -Terminates a non-blocking reception early.
   - uart_pal2_UART_GetReceiveStatus -Get the status of the current non-blocking UART reception.
   - uart_pal2_UART_SetRxBuffer -Provide a buffer for receiving data.
   - uart_pal2_UART_SetTxBuffer -Provide a buffer for transmitting data.

Module "ethernet2" (component enet)
   - ethernet2_ENET_DRV_GetDefaultConfig -Gets the default configuration structure.
   - ethernet2_ENET_DRV_Init -Initializes the ENET module.
   - ethernet2_ENET_DRV_Deinit -Deinitializes the ENET module.
   - ethernet2_ENET_DRV_ReadFrame -Reads a received Ethernet frame.
   - ethernet2_ENET_DRV_ProvideRxBuff -Provides a receive buffer to be used by the driver for reception.
   - ethernet2_ENET_DRV_SendFrame -Sends an Ethernet frame.
   - ethernet2_ENET_DRV_GetTransmitStatus -Checks if the transmission of a buffer is complete and extracts information related 
                to the transmission.
   - ethernet2_ENET_DRV_EnableMDIO -Enables the MDIO interface.
   - ethernet2_ENET_DRV_MDIORead -Reads the selected register of the PHY.
   - ethernet2_ENET_DRV_MDIOWrite -Writes the selected register of the PHY.
   - ethernet2_ENET_DRV_MDIOReadMMD -Reads a register of the specified MMD in a PHY device.
   - ethernet2_ENET_DRV_MDIOWriteMMD -Writes a register of the specified MMD in a PHY device.
   - ethernet2_ENET_DRV_SetMacAddr -Configures the physical address of the MAC.
   - ethernet2_ENET_DRV_GetMacAddr -Gets the physical address of the MAC.
   - ethernet2_ENET_DRV_SetUnicastForward -Enables/Disables forwarding of unicast traffic having a specific MAC address as 
                destination.
   - ethernet2_ENET_DRV_SetMulticastForward -Enables/Disables forwarding of multicast traffic having a specific MAC address as 
                destination.
   - ethernet2_ENET_DRV_SetMulticastForwardAll -Enables/Disables forwarding of the multicast traffic, irrespective of the 
                destination MAC address.
   - ethernet2_ENET_DRV_SetSleepMode -Sets the MAC in sleep mode or normal mode.
   - ethernet2_ENET_DRV_ConfigCounters -Enables/Disables the MIB counters.
   - ethernet2_ENET_DRV_GetCounter -Gets statistics from the specified counter.
   - ethernet2_ENET_DRV_GetInterruptFlags -Gets a mask of the interrupt events which occurred.
   - ethernet2_ENET_DRV_SetSpeed -Sets the speed of the MII interface.
   - ethernet2_ENET_DRV_TimerInit -Initializes the adjustable timer using the given configuration and enables it.
   - ethernet2_ENET_DRV_TimerStart -Starts the timer.
   - ethernet2_ENET_DRV_TimerStop -Stops the timer.
   - ethernet2_ENET_DRV_TimerSet -Sets the value of the timer.
   - ethernet2_ENET_DRV_TimerGet -Gets the value of the timer.
   - ethernet2_ENET_DRV_TimerSetCorrection -Sets the timer correction period and correction increment value.
   - ethernet2_ENET_DRV_TimerEnableChannel -Configures and enables a specific timer channel.
   - ethernet2_ENET_DRV_TimerSetCompare -Sets the compare value for a channel configured as output compare.
   - ethernet2_ENET_DRV_TimerGetCapture -Gets the last value captured on a specific channel configured as input capture.
   - ethernet2_ENET_DRV_TimerSetPulseWidth -Sets the pulse width for a channel configured as output compare with output in 
                pulse mode.
   - ethernet2_ENET_DRV_ConfigTxScheme -Sets the transmitter queue selection/arbitration scheme.
   - ethernet2_ENET_DRV_ConfigIdleSlope -Configures the idle slope for the additional classes traffic.
   - ethernet2_ENET_DRV_ConfigClassMatch -Configures the VLAN priority matching for the specified class.
   - ethernet2_ENET_DRV_ConfigRxFlush -Enables/Disables receive flushing for a specified ring.
   - ethernet2_ENET_DRV_EnableRxInterruptCoalescing -Enables receive interrupts coalescing.
   - ethernet2_ENET_DRV_DisableRxInterruptCoalescing -Disables receive interrupts coalescing.
   - ethernet2_ENET_DRV_EnableTxInterruptCoalescing -Enables transmit interrupts coalescing.
   - ethernet2_ENET_DRV_DisableTxInterruptCoalescing -Disables transmit interrupts coalescing.
   - ethernet2_ENET_DRV_SetFIFOThreshold -Sets FIFO threshold levels.
   - ethernet2_ENET_DRV_SetTxFIFOWatermark -Sets the transmit FIFO watermark.
   - ethernet2_ENET_DRV_EnableTxStoreAndForward -Enables the store and forward feature on the transmit path.
   - ethernet2_ENET_DRV_RxParserInit -Configures and enables the receive parser.
   - ethernet2_ENET_DRV_RxParserDeinit -Erases all the rules and disables the receive parser.
   - ethernet2_ENET_DRV_RxParserAddAcceptRule -Appends an acceptance rule to the receive parser.
   - ethernet2_ENET_DRV_RxParserAddRejectRule -Appends a rejection rule to the receive parser.
   - ethernet2_ENET_DRV_RxParserAddLinkingRule -Appends a linking rule to the receive parser.
   - ethernet2_ENET_DRV_RxParserGetState -Returns the status of the receive parser.
   - ethernet2_ENET_DRV_RxParserGetCount -Returns the value of the requested receive parser counter.

Module "Cpu"       (component MPC5748G_176)
   - Cpu_SystemInit -This method configures the oscillator (PLL) that is part of the microcontroller device. SystemInit is 
                called from startup_device file.
   - Cpu_SystemCoreClockUpdate -SystemCoreClockUpdate evaluates the clock register settings and calculates the current core 
                clock.
   - Cpu_SystemSoftwareReset -This method initiates a software rest of the microcontroller.

===================================================================================
